# coding=utf-8
import numpy as np

"""
ndarray的矩阵运算: 数组是编程概念,矩阵和矢量是数学概念;  矩阵<-->数组  矢量<-->结构
"""

def test01():
    # 创建一个二维数组
    arr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])
    print(arr)
    # 矩阵与矩阵的运算
    print(arr + arr)
    print(arr - arr)
    print(arr * arr)
    print(arr / arr)
    # 矩阵的广播运算
    print(arr + 10)
    print(arr + 10.)
    print(arr * 1)
    print(arr * 1.)


"""
ndarray的切片与索引: 类似Python列表索引
"""

def test02():
    # 1、一维数组的切片与索引
    arr1 = np.arange(15)
    print(arr1)  # [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14]
    print(arr1[3:9])  # [3 4 5 6 7 8]

    # 2、多维数组的切片与索引
    arr2 = np.arange(15).reshape(3, 5)
    print(arr2)  # [[ 0  1  2  3  4], [ 5  6  7  8  9], [10 11 12 13 14]]
    # 取出指定一维数组
    print(arr2[1])  # [5 6 7 8 9]
    # 取出指定一维数组的指定区间
    print(arr2[1][1:4])  # [6 7 8]
    # 取出所有一维数组的指定区间
    print(arr2[:, 1:4])  # [[ 1  2  3], [ 6  7  8], [11 12 13]]

    # 3、ndarray的条件索引
    year_arr = np.array([[2008, 2009, 2010], [2011, 2012, 2013], [2014, 2015, 2016]])
    print(year_arr)
    # 返回符合条件的数组
    res = year_arr >= 2011
    print(res, res.dtype)  # [[False False False][True True True][True True True]]  bool

    data_arr = np.random.randint(10, 20, (3, 3))
    print(data_arr)  # [[10 11 14] [13 12 12] [19 13 14]]
    # 返回符合bool条件的数组: True值保留,False值舍弃
    res1 = data_arr[res]
    print(res1)  # [13 12 12 19 13 14]

    res2 = (year_arr >= 2011) & (year_arr % 2 == 0)
    print(res2)  # [[False False False][False True False][True False True]]
    res3 = data_arr[res2]
    print(res3)  # [12 19 14]

"""
ndarray的维度转换
"""

def test03():
    # 二维数组维度转换: 直接用transpose()
    arr = np.random.rand(3, 4)
    # print(arr)
    # [[0.50549962 0.36096987 0.35801624 0.22453225]
    #  [0.46636723 0.74994111 0.18365661 0.9095176 ]
    #  [0.679158   0.74111392 0.34405221 0.82265274]]
    # print(arr.transpose())
    # [[0.50549962 0.46636723 0.679158  ]
    #  [0.36096987 0.74994111 0.74111392]
    #  [0.35801624 0.18365661 0.34405221]
    #  [0.22453225 0.9095176  0.82265274]]

    # 高维数组维度转换: transpose()参数是原维数所在下标,  2,3,4对应0,1,2
    arr1 = np.random.rand(2, 3, 4)
    print(arr1)
    # [[[0.93922657 0.16755846 0.0719779  0.21246293]
    #  [0.87723544 0.66142635 0.53557861 0.30152887]
    #  [0.28774457 0.78649435 0.24466841 0.03972808]]
    #
    #  [[0.84227734 0.40495621 0.64307526 0.70274738]
    #  [0.17828083 0.26952617 0.98242535 0.98394429]
    #  [0.21008286 0.69398357 0.02030461 0.44815239]]]
    print(arr1.transpose(2, 0, 1))
    # [[[0.93922657 0.87723544 0.28774457]
    #   [0.84227734 0.17828083 0.21008286]]
    #
    #  [[0.16755846 0.66142635 0.78649435]
    #   [0.40495621 0.26952617 0.69398357]]
    #
    #  [[0.0719779  0.53557861 0.24466841]
    #   [0.64307526 0.98242535 0.02030461]]
    #
    #  [[0.21246293 0.30152887 0.03972808]
    #   [0.70274738 0.98394429 0.44815239]]]




if __name__ == "__main__":
    # test01()
    # test02()
    test03()